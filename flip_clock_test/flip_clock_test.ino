#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels


#define OLED_MOSI   13
#define OLED_CLK   14
#define OLED_DC    5
#define OLED_CS    15
#define OLED_RESET 4
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
  OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
// OLED display configuration


// Wi-Fi configuration
char ssid[] = "pi";         // Replace with your Wi-Fi SSID
char password[] = "raspberry"; // Replace with your Wi-Fi password

// NTP configuration
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 19800, 60000); // IST (GMT+5:30)

// Bitmap placeholders for 0-9 and AM/PM (using the same 24x30 placeholder)
const uint8_t* getDigitBitmap(int digit) {
  // Simplified version, using default placeholder for digits and AM/PM
  // Replace with real bitmaps as needed


// Bitmap placeholders for 0-9 and AM/PM characters
static const uint8_t zeroBitmap[] PROGMEM = { 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 
0x81, 0xfc, 0x7e, 0x00, 0xfc, 0x7c, 0x00, 0x7c, 0x78, 0x38, 0x3c, 0x78, 0x7c, 0x1c, 0x70, 0xfe, 
0x1c, 0x70, 0xfe, 0x1c, 0x71, 0xff, 0x1c, 0x71, 0xff, 0x0c, 0x61, 0xff, 0x0c, 0x61, 0xff, 0x0c, 
0x71, 0xff, 0x0c, 0x71, 0xff, 0x1c, 0x70, 0xfe, 0x1c, 0x70, 0xfe, 0x1c, 0x78, 0x7c, 0x3c, 0x78, 
0x18, 0x3c, 0x7c, 0x00, 0x7c, 0x7e, 0x00, 0xfc, 0x7f, 0x83, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 
0xfc, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xf0 };
static const uint8_t oneBitmap[] PROGMEM = { 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7e, 
0x03, 0xfc, 0x7c, 0x03, 0xfc, 0x7c, 0x03, 0xfc, 0x7f, 0xc3, 0xfc, 0x7f, 0xe3, 0xfc, 0x7f, 0xe3, 
0xfc, 0x7f, 0xe3, 0xfc, 0x7f, 0xe3, 0xfc, 0x7f, 0xe3, 0xfc, 0x7f, 0xe3, 0xfc, 0x7f, 0xe3, 0xfc, 
0x7f, 0xe3, 0xfc, 0x7f, 0xe3, 0xfc, 0x7f, 0xe3, 0xfc, 0x7f, 0xe3, 0xfc, 0x7f, 0xe3, 0xfc, 0x7f, 
0xe3, 0xfc, 0x7f, 0xc3, 0xfc, 0x7f, 0xc3, 0xfc, 0x7f, 0xe3, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 
0xfc, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xf0 };
static const uint8_t twoBitmap[] PROGMEM = { 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7e, 
0x03, 0xfc, 0x7c, 0x00, 0xfc, 0x70, 0x00, 0x7c, 0x70, 0x78, 0x3c, 0x79, 0xfc, 0x3c, 0x7f, 0xfc, 
0x3c, 0x7f, 0xfc, 0x3c, 0x7f, 0xfc, 0x3c, 0x7f, 0xf8, 0x7c, 0x7f, 0xf0, 0x7c, 0x7f, 0xe0, 0xfc, 
0x7f, 0xc1, 0xfc, 0x7f, 0x83, 0xfc, 0x7f, 0x07, 0xfc, 0x7e, 0x0f, 0xfc, 0x7c, 0x1f, 0xfc, 0x78, 
0x10, 0x3c, 0x70, 0x00, 0x1c, 0x70, 0x00, 0x1c, 0x78, 0x00, 0x3c, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 
0xfc, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xf0 };
static const uint8_t threeBitmap[] PROGMEM = { 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x78, 
0x00, 0x7c, 0x70, 0x00, 0x3c, 0x70, 0x00, 0x3c, 0x7f, 0xf8, 0x7c, 0x7f, 0xf0, 0xfc, 0x7f, 0xe1, 
0xfc, 0x7f, 0xc3, 0xfc, 0x7f, 0xc3, 0xfc, 0x7f, 0x83, 0xfc, 0x7f, 0x80, 0xfc, 0x7f, 0x80, 0x7c, 
0x7f, 0xf8, 0x3c, 0x7f, 0xfc, 0x3c, 0x7f, 0xfe, 0x3c, 0x7f, 0xfe, 0x3c, 0x7b, 0xfc, 0x3c, 0x70, 
0x70, 0x3c, 0x70, 0x00, 0x7c, 0x78, 0x00, 0xfc, 0x7f, 0x03, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 
0xfc, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xf0 };
static const uint8_t fourBitmap[] PROGMEM = { 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 
0xf8, 0xfc, 0x7f, 0xf0, 0xfc, 0x7f, 0xe1, 0xfc, 0x7f, 0xc3, 0xfc, 0x7f, 0x87, 0xfc, 0x7f, 0x87, 
0xfc, 0x7f, 0x0f, 0xfc, 0x7e, 0x1f, 0xfc, 0x7c, 0x3c, 0x7c, 0x7c, 0x3c, 0x7c, 0x78, 0x7c, 0x7c, 
0x70, 0xfc, 0x7c, 0x60, 0x00, 0x0c, 0x60, 0x00, 0x04, 0x60, 0x00, 0x0c, 0x7f, 0xf8, 0x7c, 0x7f, 
0xfc, 0x7c, 0x7f, 0xfc, 0x7c, 0x7f, 0xfc, 0x7c, 0x7f, 0xfc, 0x7c, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 
0xfc, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xf0 };
static const uint8_t fiveBitmap[] PROGMEM = { 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7e, 
0x00, 0x7c, 0x7c, 0x00, 0x3c, 0x7c, 0x00, 0x3c, 0x7c, 0x3f, 0xfc, 0x7c, 0x7f, 0xfc, 0x7c, 0x7f, 
0xfc, 0x7c, 0x7f, 0xfc, 0x7c, 0x7f, 0xfc, 0x7c, 0x01, 0xfc, 0x78, 0x00, 0x7c, 0x7c, 0x00, 0x3c, 
0x7f, 0xfc, 0x3c, 0x7f, 0xfe, 0x1c, 0x7f, 0xfe, 0x1c, 0x7f, 0xfe, 0x1c, 0x79, 0xfc, 0x3c, 0x70, 
0x78, 0x3c, 0x70, 0x00, 0x7c, 0x78, 0x00, 0xfc, 0x7f, 0x03, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 
0xfc, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xf0 };
static const uint8_t sixBitmap[] PROGMEM = { 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 
0xc0, 0x7c, 0x7f, 0x00, 0x3c, 0x7e, 0x00, 0x3c, 0x7c, 0x1f, 0x7c, 0x78, 0x3f, 0xfc, 0x78, 0x7f, 
0xfc, 0x78, 0xff, 0xfc, 0x70, 0xff, 0xfc, 0x70, 0x80, 0x7c, 0x70, 0x00, 0x3c, 0x70, 0x00, 0x1c, 
0x70, 0x7e, 0x1c, 0x70, 0x7f, 0x1c, 0x70, 0xff, 0x0c, 0x78, 0xff, 0x1c, 0x78, 0x7e, 0x1c, 0x7c, 
0x3c, 0x1c, 0x7c, 0x00, 0x3c, 0x7f, 0x00, 0x7c, 0x7f, 0xc1, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 
0xfc, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xf0 };
static const uint8_t sevenBitmap[] PROGMEM = { 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x70, 
0x00, 0x1c, 0x70, 0x00, 0x1c, 0x70, 0x00, 0x1c, 0x70, 0xfc, 0x1c, 0x71, 0xfc, 0x3c, 0x71, 0xfc, 
0x3c, 0x71, 0xf8, 0x7c, 0x7f, 0xf8, 0x7c, 0x7f, 0xf0, 0xfc, 0x7f, 0xf0, 0xfc, 0x7f, 0xf1, 0xfc, 
0x7f, 0xe1, 0xfc, 0x7f, 0xe1, 0xfc, 0x7f, 0xc3, 0xfc, 0x7f, 0xc3, 0xfc, 0x7f, 0x87, 0xfc, 0x7f, 
0x87, 0xfc, 0x7f, 0x0f, 0xfc, 0x7f, 0x0f, 0xfc, 0x7f, 0x1f, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 
0xfc, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xf0 };
static const uint8_t eightBitmap[] PROGMEM = { 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 
0x01, 0xfc, 0x7c, 0x00, 0x7c, 0x78, 0x00, 0x3c, 0x78, 0x7c, 0x3c, 0x70, 0xfe, 0x1c, 0x70, 0xfe, 
0x1c, 0x70, 0xfe, 0x1c, 0x78, 0x7c, 0x3c, 0x7c, 0x00, 0x7c, 0x7c, 0x00, 0x7c, 0x78, 0x00, 0x3c, 
0x70, 0x7c, 0x1c, 0x70, 0xfe, 0x1c, 0x71, 0xff, 0x1c, 0x71, 0xff, 0x1c, 0x70, 0xfe, 0x1c, 0x70, 
0x7c, 0x1c, 0x78, 0x00, 0x3c, 0x7c, 0x00, 0x7c, 0x7f, 0x01, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 
0xfc, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xf0 };
static const uint8_t nineBitmap[] PROGMEM = { 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7e, 
0x03, 0xfc, 0x7c, 0x00, 0xfc, 0x78, 0x00, 0x7c, 0x70, 0x78, 0x3c, 0x70, 0xfc, 0x3c, 0x71, 0xfe, 
0x3c, 0x61, 0xfe, 0x1c, 0x70, 0xfc, 0x1c, 0x70, 0xf8, 0x1c, 0x70, 0x00, 0x1c, 0x78, 0x00, 0x1c, 
0x7e, 0x02, 0x1c, 0x7f, 0xfe, 0x1c, 0x7f, 0xfe, 0x1c, 0x7f, 0xfc, 0x3c, 0x7f, 0xf8, 0x3c, 0x78, 
0xe0, 0x7c, 0x78, 0x00, 0xfc, 0x78, 0x01, 0xfc, 0x7c, 0x07, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 
0xfc, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xf0 };
static const uint8_t amBitmap[] PROGMEM = { 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 
0xff, 0xfc, 0x7f, 0x83, 0xfc, 0x7f, 0x83, 0xfc, 0x7f, 0x01, 0xfc, 0x7f, 0x01, 0xfc, 0x7f, 0x10, 
0xfc, 0x7e, 0x10, 0xfc, 0x7e, 0x38, 0xfc, 0x7c, 0x38, 0x7c, 0x7c, 0x7c, 0x7c, 0x78, 0x7c, 0x3c, 
0x78, 0x00, 0x3c, 0x70, 0x00, 0x1c, 0x70, 0x00, 0x1c, 0x71, 0xff, 0x0c, 0x61, 0xff, 0x0c, 0x61, 
0xff, 0x0c, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 
0xfc, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xf0 };
static const uint8_t pmBitmap[] PROGMEM = { 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 
0xff, 0xfc, 0x78, 0x00, 0xfc, 0x78, 0x00, 0x7c, 0x78, 0x00, 0x3c, 0x78, 0x7c, 0x1c, 0x78, 0x7e, 
0x1c, 0x78, 0x7e, 0x1c, 0x78, 0x7e, 0x1c, 0x78, 0x7e, 0x1c, 0x78, 0x78, 0x1c, 0x78, 0x00, 0x3c, 
0x78, 0x00, 0x7c, 0x78, 0x03, 0xfc, 0x78, 0x7f, 0xfc, 0x78, 0x7f, 0xfc, 0x78, 0x7f, 0xfc, 0x78, 
0x7f, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 
0xfc, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x1f, 0xff, 0xf0 };
  
  // (Add your actual bitmaps here for each number and AM/PM)
  switch (digit) {
    case 0: return zeroBitmap;
    case 1: return oneBitmap;
    case 2: return twoBitmap;
    case 3: return threeBitmap;
    case 4: return fourBitmap;
    case 5: return fiveBitmap;
    case 6: return sixBitmap;
    case 7: return sevenBitmap;
    case 8: return eightBitmap;
    case 9: return nineBitmap;
    case 10: return amBitmap;  // AM indicator
    case 11: return pmBitmap;  // PM indicator
    default: return zeroBitmap; // Default to zero if an invalid digit is passed
  }
}

void setup() {
  Serial.begin(115200);

  // Initialize OLED display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    while (true);
  }

  delay(2000);
  display.clearDisplay();

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" Wi-Fi Connected!");

  // Initialize NTP client
  timeClient.begin();
  timeClient.update();
}

void loop() {
  static unsigned long previousMillis = 0;
  const long interval = 1000; // Update interval (1 second)
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // Update time from NTP server
    timeClient.update();

    int currentHour = timeClient.getHours();
    int currentMinute = timeClient.getMinutes();
    int currentSecond = timeClient.getSeconds();

    // Convert to 12-hour format
    bool isPM = currentHour >= 12;
    currentHour = currentHour % 12;
    if (currentHour == 0) currentHour = 12;

    // Clear display
    display.clearDisplay();

    // Display hour
    display.setCursor(0, 10);
    display.drawBitmap(0, 0, getDigitBitmap(currentHour / 10), 24, 30, WHITE); // First digit
    display.drawBitmap(24, 0, getDigitBitmap(currentHour % 10), 24, 30, WHITE); // Second digit

    // Display colon
    display.fillRect(48, 12, 4, 4, WHITE); // Colon top
    display.fillRect(48, 24, 4, 4, WHITE); // Colon bottom

    // Display minute
    display.drawBitmap(56, 0, getDigitBitmap(currentMinute / 10), 24, 30, WHITE); // First digit
    display.drawBitmap(80, 0, getDigitBitmap(currentMinute % 10), 24, 30, WHITE); // Second digit

    // Display second
    display.drawBitmap(112, 0, getDigitBitmap(currentSecond / 10), 24, 30, WHITE); // First digit
    display.drawBitmap(136, 0, getDigitBitmap(currentSecond % 10), 24, 30, WHITE); // Second digit

    // Display AM/PM
    display.setCursor(100, 10);
    display.print(isPM ? "PM" : "AM");

    // Update display
    display.display();
  }
}
